`timescale 1ns / 1ps

module wallace_tree_multiplier(
    input [15:0] a,
    input [15:0] b,
    output [31:0] c
    );

//partial products

wire [0:0] pp0;
wire [1:0] pp1;
wire [2:0] pp2;
wire [3:0] pp3;
wire [4:0] pp4;
wire [5:0] pp5;
wire [6:0] pp6;
wire [7:0] pp7;
wire [8:0] pp8;
wire [9:0] pp9;
wire [10:0] pp10;
wire [11:0] pp11;
wire [12:0] pp12;
wire [13:0] pp13;
wire [14:0] pp14;
wire [15:0] pp15;
wire [14:0] pp16;
wire [13:0] pp17;
wire [12:0] pp18;
wire [11:0] pp19;
wire [10:0] pp20;
wire [9:0] pp21;
wire [8:0] pp22;
wire [7:0] pp23;
wire [6:0] pp24;
wire [5:0] pp25;
wire [4:0] pp26;
wire [3:0] pp27;
wire [2:0] pp28;
wire [1:0] pp29;
wire [0:0] pp30;


assign pp0[0] = a[0] & b[0];
assign pp1[0] = a[0] & b[1];
assign pp2[0] = a[0] & b[2];
assign pp3[0] = a[0] & b[3];
assign pp4[0] = a[0] & b[4];
assign pp5[0] = a[0] & b[5];
assign pp6[0] = a[0] & b[6];
assign pp7[0] = a[0] & b[7];
assign pp8[0] = a[0] & b[8];
assign pp9[0] = a[0] & b[9];
assign pp10[0] = a[0] & b[10];
assign pp11[0] = a[0] & b[11];
assign pp12[0] = a[0] & b[12];
assign pp13[0] = a[0] & b[13];
assign pp14[0] = a[0] & b[14];
assign pp15[0] = a[0] & b[15];
assign pp1[1] = a[1] & b[0];
assign pp2[1] = a[1] & b[1];
assign pp3[1] = a[1] & b[2];
assign pp4[1] = a[1] & b[3];
assign pp5[1] = a[1] & b[4];
assign pp6[1] = a[1] & b[5];
assign pp7[1] = a[1] & b[6];
assign pp8[1] = a[1] & b[7];
assign pp9[1] = a[1] & b[8];
assign pp10[1] = a[1] & b[9];
assign pp11[1] = a[1] & b[10];
assign pp12[1] = a[1] & b[11];
assign pp13[1] = a[1] & b[12];
assign pp14[1] = a[1] & b[13];
assign pp15[1] = a[1] & b[14];
assign pp16[0] = a[1] & b[15];
assign pp2[2] = a[2] & b[0];
assign pp3[2] = a[2] & b[1];
assign pp4[2] = a[2] & b[2];
assign pp5[2] = a[2] & b[3];
assign pp6[2] = a[2] & b[4];
assign pp7[2] = a[2] & b[5];
assign pp8[2] = a[2] & b[6];
assign pp9[2] = a[2] & b[7];
assign pp10[2] = a[2] & b[8];
assign pp11[2] = a[2] & b[9];
assign pp12[2] = a[2] & b[10];
assign pp13[2] = a[2] & b[11];
assign pp14[2] = a[2] & b[12];
assign pp15[2] = a[2] & b[13];
assign pp16[1] = a[2] & b[14];
assign pp17[0] = a[2] & b[15];
assign pp3[3] = a[3] & b[0];
assign pp4[3] = a[3] & b[1];
assign pp5[3] = a[3] & b[2];
assign pp6[3] = a[3] & b[3];
assign pp7[3] = a[3] & b[4];
assign pp8[3] = a[3] & b[5];
assign pp9[3] = a[3] & b[6];
assign pp10[3] = a[3] & b[7];
assign pp11[3] = a[3] & b[8];
assign pp12[3] = a[3] & b[9];
assign pp13[3] = a[3] & b[10];
assign pp14[3] = a[3] & b[11];
assign pp15[3] = a[3] & b[12];
assign pp16[2] = a[3] & b[13];
assign pp17[1] = a[3] & b[14];
assign pp18[0] = a[3] & b[15];
assign pp4[4] = a[4] & b[0];
assign pp5[4] = a[4] & b[1];
assign pp6[4] = a[4] & b[2];
assign pp7[4] = a[4] & b[3];
assign pp8[4] = a[4] & b[4];
assign pp9[4] = a[4] & b[5];
assign pp10[4] = a[4] & b[6];
assign pp11[4] = a[4] & b[7];
assign pp12[4] = a[4] & b[8];
assign pp13[4] = a[4] & b[9];
assign pp14[4] = a[4] & b[10];
assign pp15[4] = a[4] & b[11];
assign pp16[3] = a[4] & b[12];
assign pp17[2] = a[4] & b[13];
assign pp18[1] = a[4] & b[14];
assign pp19[0] = a[4] & b[15];
assign pp5[5] = a[5] & b[0];
assign pp6[5] = a[5] & b[1];
assign pp7[5] = a[5] & b[2];
assign pp8[5] = a[5] & b[3];
assign pp9[5] = a[5] & b[4];
assign pp10[5] = a[5] & b[5];
assign pp11[5] = a[5] & b[6];
assign pp12[5] = a[5] & b[7];
assign pp13[5] = a[5] & b[8];
assign pp14[5] = a[5] & b[9];
assign pp15[5] = a[5] & b[10];
assign pp16[4] = a[5] & b[11];
assign pp17[3] = a[5] & b[12];
assign pp18[2] = a[5] & b[13];
assign pp19[1] = a[5] & b[14];
assign pp20[0] = a[5] & b[15];
assign pp6[6] = a[6] & b[0];
assign pp7[6] = a[6] & b[1];
assign pp8[6] = a[6] & b[2];
assign pp9[6] = a[6] & b[3];
assign pp10[6] = a[6] & b[4];
assign pp11[6] = a[6] & b[5];
assign pp12[6] = a[6] & b[6];
assign pp13[6] = a[6] & b[7];
assign pp14[6] = a[6] & b[8];
assign pp15[6] = a[6] & b[9];
assign pp16[5] = a[6] & b[10];
assign pp17[4] = a[6] & b[11];
assign pp18[3] = a[6] & b[12];
assign pp19[2] = a[6] & b[13];
assign pp20[1] = a[6] & b[14];
assign pp21[0] = a[6] & b[15];
assign pp7[7] = a[7] & b[0];
assign pp8[7] = a[7] & b[1];
assign pp9[7] = a[7] & b[2];
assign pp10[7] = a[7] & b[3];
assign pp11[7] = a[7] & b[4];
assign pp12[7] = a[7] & b[5];
assign pp13[7] = a[7] & b[6];
assign pp14[7] = a[7] & b[7];
assign pp15[7] = a[7] & b[8];
assign pp16[6] = a[7] & b[9];
assign pp17[5] = a[7] & b[10];
assign pp18[4] = a[7] & b[11];
assign pp19[3] = a[7] & b[12];
assign pp20[2] = a[7] & b[13];
assign pp21[1] = a[7] & b[14];
assign pp22[0] = a[7] & b[15];
assign pp8[8] = a[8] & b[0];
assign pp9[8] = a[8] & b[1];
assign pp10[8] = a[8] & b[2];
assign pp11[8] = a[8] & b[3];
assign pp12[8] = a[8] & b[4];
assign pp13[8] = a[8] & b[5];
assign pp14[8] = a[8] & b[6];
assign pp15[8] = a[8] & b[7];
assign pp16[7] = a[8] & b[8];
assign pp17[6] = a[8] & b[9];
assign pp18[5] = a[8] & b[10];
assign pp19[4] = a[8] & b[11];
assign pp20[3] = a[8] & b[12];
assign pp21[2] = a[8] & b[13];
assign pp22[1] = a[8] & b[14];
assign pp23[0] = a[8] & b[15];
assign pp9[9] = a[9] & b[0];
assign pp10[9] = a[9] & b[1];
assign pp11[9] = a[9] & b[2];
assign pp12[9] = a[9] & b[3];
assign pp13[9] = a[9] & b[4];
assign pp14[9] = a[9] & b[5];
assign pp15[9] = a[9] & b[6];
assign pp16[8] = a[9] & b[7];
assign pp17[7] = a[9] & b[8];
assign pp18[6] = a[9] & b[9];
assign pp19[5] = a[9] & b[10];
assign pp20[4] = a[9] & b[11];
assign pp21[3] = a[9] & b[12];
assign pp22[2] = a[9] & b[13];
assign pp23[1] = a[9] & b[14];
assign pp24[0] = a[9] & b[15];
assign pp10[10] = a[10] & b[0];
assign pp11[10] = a[10] & b[1];
assign pp12[10] = a[10] & b[2];
assign pp13[10] = a[10] & b[3];
assign pp14[10] = a[10] & b[4];
assign pp15[10] = a[10] & b[5];
assign pp16[9] = a[10] & b[6];
assign pp17[8] = a[10] & b[7];
assign pp18[7] = a[10] & b[8];
assign pp19[6] = a[10] & b[9];
assign pp20[5] = a[10] & b[10];
assign pp21[4] = a[10] & b[11];
assign pp22[3] = a[10] & b[12];
assign pp23[2] = a[10] & b[13];
assign pp24[1] = a[10] & b[14];
assign pp25[0] = a[10] & b[15];
assign pp11[11] = a[11] & b[0];
assign pp12[11] = a[11] & b[1];
assign pp13[11] = a[11] & b[2];
assign pp14[11] = a[11] & b[3];
assign pp15[11] = a[11] & b[4];
assign pp16[10] = a[11] & b[5];
assign pp17[9] = a[11] & b[6];
assign pp18[8] = a[11] & b[7];
assign pp19[7] = a[11] & b[8];
assign pp20[6] = a[11] & b[9];
assign pp21[5] = a[11] & b[10];
assign pp22[4] = a[11] & b[11];
assign pp23[3] = a[11] & b[12];
assign pp24[2] = a[11] & b[13];
assign pp25[1] = a[11] & b[14];
assign pp26[0] = a[11] & b[15];
assign pp12[12] = a[12] & b[0];
assign pp13[12] = a[12] & b[1];
assign pp14[12] = a[12] & b[2];
assign pp15[12] = a[12] & b[3];
assign pp16[11] = a[12] & b[4];
assign pp17[10] = a[12] & b[5];
assign pp18[9] = a[12] & b[6];
assign pp19[8] = a[12] & b[7];
assign pp20[7] = a[12] & b[8];
assign pp21[6] = a[12] & b[9];
assign pp22[5] = a[12] & b[10];
assign pp23[4] = a[12] & b[11];
assign pp24[3] = a[12] & b[12];
assign pp25[2] = a[12] & b[13];
assign pp26[1] = a[12] & b[14];
assign pp27[0] = a[12] & b[15];
assign pp13[13] = a[13] & b[0];
assign pp14[13] = a[13] & b[1];
assign pp15[13] = a[13] & b[2];
assign pp16[12] = a[13] & b[3];
assign pp17[11] = a[13] & b[4];
assign pp18[10] = a[13] & b[5];
assign pp19[9] = a[13] & b[6];
assign pp20[8] = a[13] & b[7];
assign pp21[7] = a[13] & b[8];
assign pp22[6] = a[13] & b[9];
assign pp23[5] = a[13] & b[10];
assign pp24[4] = a[13] & b[11];
assign pp25[3] = a[13] & b[12];
assign pp26[2] = a[13] & b[13];
assign pp27[1] = a[13] & b[14];
assign pp28[0] = a[13] & b[15];
assign pp14[14] = a[14] & b[0];
assign pp15[14] = a[14] & b[1];
assign pp16[13] = a[14] & b[2];
assign pp17[12] = a[14] & b[3];
assign pp18[11] = a[14] & b[4];
assign pp19[10] = a[14] & b[5];
assign pp20[9] = a[14] & b[6];
assign pp21[8] = a[14] & b[7];
assign pp22[7] = a[14] & b[8];
assign pp23[6] = a[14] & b[9];
assign pp24[5] = a[14] & b[10];
assign pp25[4] = a[14] & b[11];
assign pp26[3] = a[14] & b[12];
assign pp27[2] = a[14] & b[13];
assign pp28[1] = a[14] & b[14];
assign pp29[0] = a[14] & b[15];
assign pp15[15] = a[15] & b[0];
assign pp16[14] = a[15] & b[1];
assign pp17[13] = a[15] & b[2];
assign pp18[12] = a[15] & b[3];
assign pp19[11] = a[15] & b[4];
assign pp20[10] = a[15] & b[5];
assign pp21[9] = a[15] & b[6];
assign pp22[8] = a[15] & b[7];
assign pp23[7] = a[15] & b[8];
assign pp24[6] = a[15] & b[9];
assign pp25[5] = a[15] & b[10];
assign pp26[4] = a[15] & b[11];
assign pp27[3] = a[15] & b[12];
assign pp28[2] = a[15] & b[13];
assign pp29[1] = a[15] & b[14];
assign pp30[0] = a[15] & b[15];


//first stage

wire [0:0] r1_0;
wire [0:0] r1_1;
wire [1:0] r1_2;
wire [1:0] r1_3;
wire [2:0] r1_4;
wire [3:0] r1_5;
wire [3:0] r1_6;
wire [4:0] r1_7;
wire [5:0] r1_8;
wire [5:0] r1_9;
wire [6:0] r1_10;
wire [7:0] r1_11;
wire [7:0] r1_12;
wire [8:0] r1_13;
wire [9:0] r1_14;
wire [9:0] r1_15;
wire [9:0] r1_16;
wire [9:0] r1_17;
wire [8:0] r1_18;
wire [7:0] r1_19;
wire [7:0] r1_20;
wire [6:0] r1_21;
wire [5:0] r1_22;
wire [5:0] r1_23;
wire [4:0] r1_24;
wire [3:0] r1_25;
wire [3:0] r1_26;
wire [2:0] r1_27;
wire [1:0] r1_28;
wire [1:0] r1_29;
wire [1:0] r1_30;


assign r1_0[0] = pp0[0];


HA ha_1_1_0(pp1[0], pp1[1], r1_1[0], r1_2[0]);


FA fa_1_2_0(pp2[0], pp2[1], pp2[2], r1_2[1], r1_3[0]);


FA fa_1_3_0(pp3[0], pp3[1], pp3[2], r1_3[1], r1_4[0]);


FA fa_1_4_0(pp4[0], pp4[1], pp4[2], r1_4[1], r1_5[0]);
HA ha_1_4_0(pp4[3], pp4[4], r1_4[2], r1_5[1]);


FA fa_1_5_0(pp5[0], pp5[1], pp5[2], r1_5[2], r1_6[0]);
FA fa_1_5_1(pp5[3], pp5[4], pp5[5], r1_5[3], r1_6[1]);


FA fa_1_6_0(pp6[0], pp6[1], pp6[2], r1_6[2], r1_7[0]);
FA fa_1_6_1(pp6[3], pp6[4], pp6[5], r1_6[3], r1_7[1]);


FA fa_1_7_0(pp7[0], pp7[1], pp7[2], r1_7[2], r1_8[0]);
FA fa_1_7_1(pp7[3], pp7[4], pp7[5], r1_7[3], r1_8[1]);
HA ha_1_7_0(pp7[6], pp7[7], r1_7[4], r1_8[2]);


FA fa_1_8_0(pp8[0], pp8[1], pp8[2], r1_8[3], r1_9[0]);
FA fa_1_8_1(pp8[3], pp8[4], pp8[5], r1_8[4], r1_9[1]);
FA fa_1_8_2(pp8[6], pp8[7], pp8[8], r1_8[5], r1_9[2]);


FA fa_1_9_0(pp9[0], pp9[1], pp9[2], r1_9[3], r1_10[0]);
FA fa_1_9_1(pp9[3], pp9[4], pp9[5], r1_9[4], r1_10[1]);
FA fa_1_9_2(pp9[6], pp9[7], pp9[8], r1_9[5], r1_10[2]);


FA fa_1_10_0(pp10[0], pp10[1], pp10[2], r1_10[3], r1_11[0]);
FA fa_1_10_1(pp10[3], pp10[4], pp10[5], r1_10[4], r1_11[1]);
FA fa_1_10_2(pp10[6], pp10[7], pp10[8], r1_10[5], r1_11[2]);
HA ha_1_10_0(pp10[9], pp10[10], r1_10[6], r1_11[3]);


FA fa_1_11_0(pp11[0], pp11[1], pp11[2], r1_11[4], r1_12[0]);
FA fa_1_11_1(pp11[3], pp11[4], pp11[5], r1_11[5], r1_12[1]);
FA fa_1_11_2(pp11[6], pp11[7], pp11[8], r1_11[6], r1_12[2]);
FA fa_1_11_3(pp11[9], pp11[10], pp11[11], r1_11[7], r1_12[3]);


FA fa_1_12_0(pp12[0], pp12[1], pp12[2], r1_12[4], r1_13[0]);
FA fa_1_12_1(pp12[3], pp12[4], pp12[5], r1_12[5], r1_13[1]);
FA fa_1_12_2(pp12[6], pp12[7], pp12[8], r1_12[6], r1_13[2]);
FA fa_1_12_3(pp12[9], pp12[10], pp12[11], r1_12[7], r1_13[3]);


FA fa_1_13_0(pp13[0], pp13[1], pp13[2], r1_13[4], r1_14[0]);
FA fa_1_13_1(pp13[3], pp13[4], pp13[5], r1_13[5], r1_14[1]);
FA fa_1_13_2(pp13[6], pp13[7], pp13[8], r1_13[6], r1_14[2]);
FA fa_1_13_3(pp13[9], pp13[10], pp13[11], r1_13[7], r1_14[3]);
HA ha_1_13_0(pp13[12], pp13[13], r1_13[8], r1_14[4]);


FA fa_1_14_0(pp14[0], pp14[1], pp14[2], r1_14[5], r1_15[0]);
FA fa_1_14_1(pp14[3], pp14[4], pp14[5], r1_14[6], r1_15[1]);
FA fa_1_14_2(pp14[6], pp14[7], pp14[8], r1_14[7], r1_15[2]);
FA fa_1_14_3(pp14[9], pp14[10], pp14[11], r1_14[8], r1_15[3]);
FA fa_1_14_4(pp14[12], pp14[13], pp14[14], r1_14[9], r1_15[4]);


FA fa_1_15_0(pp15[0], pp15[1], pp15[2], r1_15[5], r1_16[0]);
FA fa_1_15_1(pp15[3], pp15[4], pp15[5], r1_15[6], r1_16[1]);
FA fa_1_15_2(pp15[6], pp15[7], pp15[8], r1_15[7], r1_16[2]);
FA fa_1_15_3(pp15[9], pp15[10], pp15[11], r1_15[8], r1_16[3]);
FA fa_1_15_4(pp15[12], pp15[13], pp15[14], r1_15[9], r1_16[4]);


FA fa_1_16_0(pp16[0], pp16[1], pp16[2], r1_16[5], r1_17[0]);
FA fa_1_16_1(pp16[3], pp16[4], pp16[5], r1_16[6], r1_17[1]);
FA fa_1_16_2(pp16[6], pp16[7], pp16[8], r1_16[7], r1_17[2]);
FA fa_1_16_3(pp16[9], pp16[10], pp16[11], r1_16[8], r1_17[3]);
FA fa_1_16_4(pp16[12], pp16[13], pp16[14], r1_16[9], r1_17[4]);


FA fa_1_17_0(pp17[0], pp17[1], pp17[2], r1_17[5], r1_18[0]);
FA fa_1_17_1(pp17[3], pp17[4], pp17[5], r1_17[6], r1_18[1]);
FA fa_1_17_2(pp17[6], pp17[7], pp17[8], r1_17[7], r1_18[2]);
FA fa_1_17_3(pp17[9], pp17[10], pp17[11], r1_17[8], r1_18[3]);
HA ha_1_17_0(pp17[12], pp17[13], r1_17[9], r1_18[4]);


FA fa_1_18_0(pp18[0], pp18[1], pp18[2], r1_18[5], r1_19[0]);
FA fa_1_18_1(pp18[3], pp18[4], pp18[5], r1_18[6], r1_19[1]);
FA fa_1_18_2(pp18[6], pp18[7], pp18[8], r1_18[7], r1_19[2]);
FA fa_1_18_3(pp18[9], pp18[10], pp18[11], r1_18[8], r1_19[3]);


FA fa_1_19_0(pp19[0], pp19[1], pp19[2], r1_19[4], r1_20[0]);
FA fa_1_19_1(pp19[3], pp19[4], pp19[5], r1_19[5], r1_20[1]);
FA fa_1_19_2(pp19[6], pp19[7], pp19[8], r1_19[6], r1_20[2]);
FA fa_1_19_3(pp19[9], pp19[10], pp19[11], r1_19[7], r1_20[3]);


FA fa_1_20_0(pp20[0], pp20[1], pp20[2], r1_20[4], r1_21[0]);
FA fa_1_20_1(pp20[3], pp20[4], pp20[5], r1_20[5], r1_21[1]);
FA fa_1_20_2(pp20[6], pp20[7], pp20[8], r1_20[6], r1_21[2]);
HA ha_1_20_0(pp20[9], pp20[10], r1_20[7], r1_21[3]);


FA fa_1_21_0(pp21[0], pp21[1], pp21[2], r1_21[4], r1_22[0]);
FA fa_1_21_1(pp21[3], pp21[4], pp21[5], r1_21[5], r1_22[1]);
FA fa_1_21_2(pp21[6], pp21[7], pp21[8], r1_21[6], r1_22[2]);


FA fa_1_22_0(pp22[0], pp22[1], pp22[2], r1_22[3], r1_23[0]);
FA fa_1_22_1(pp22[3], pp22[4], pp22[5], r1_22[4], r1_23[1]);
FA fa_1_22_2(pp22[6], pp22[7], pp22[8], r1_22[5], r1_23[2]);


FA fa_1_23_0(pp23[0], pp23[1], pp23[2], r1_23[3], r1_24[0]);
FA fa_1_23_1(pp23[3], pp23[4], pp23[5], r1_23[4], r1_24[1]);
HA ha_1_23_0(pp23[6], pp23[7], r1_23[5], r1_24[2]);


FA fa_1_24_0(pp24[0], pp24[1], pp24[2], r1_24[3], r1_25[0]);
FA fa_1_24_1(pp24[3], pp24[4], pp24[5], r1_24[4], r1_25[1]);


FA fa_1_25_0(pp25[0], pp25[1], pp25[2], r1_25[2], r1_26[0]);
FA fa_1_25_1(pp25[3], pp25[4], pp25[5], r1_25[3], r1_26[1]);


FA fa_1_26_0(pp26[0], pp26[1], pp26[2], r1_26[2], r1_27[0]);
HA ha_1_26_0(pp26[3], pp26[4], r1_26[3], r1_27[1]);


FA fa_1_27_0(pp27[0], pp27[1], pp27[2], r1_27[2], r1_28[0]);


FA fa_1_28_0(pp28[0], pp28[1], pp28[2], r1_28[1], r1_29[0]);


HA ha_1_29_0(pp29[0], pp29[1], r1_29[1], r1_30[0]);


assign r1_30[1] = pp30[0];


//second stage


wire [0:0] r2_0;
wire [0:0] r2_1;
wire [0:0] r2_2;
wire [1:0] r2_3;
wire [1:0] r2_4;
wire [1:0] r2_5;
wire [1:0] r2_6;
wire [2:0] r2_7;
wire [3:0] r2_8;
wire [3:0] r2_9;
wire [3:0] r2_10;
wire [4:0] r2_11;
wire [5:0] r2_12;
wire [5:0] r2_13;
wire [5:0] r2_14;
wire [5:0] r2_15;
wire [5:0] r2_16;
wire [5:0] r2_17;
wire [5:0] r2_18;
wire [5:0] r2_19;
wire [5:0] r2_20;
wire [4:0] r2_21;
wire [3:0] r2_22;
wire [3:0] r2_23;
wire [3:0] r2_24;
wire [2:0] r2_25;
wire [1:0] r2_26;
wire [1:0] r2_27;
wire [1:0] r2_28;
wire [1:0] r2_29;
wire [1:0] r2_30;
wire [0:0] r2_31;


assign r2_0[0] = r1_0[0];


assign r2_1[0] = r1_1[0];


HA ha_2_2_0(r1_2[0], r1_2[1], r2_2[0], r2_3[0]);


HA ha_2_3_0(r1_3[0], r1_3[1], r2_3[1], r2_4[0]);


FA fa_2_4_0(r1_4[0], r1_4[1], r1_4[2], r2_4[1], r2_5[0]);


FA fa_2_5_0(r1_5[0], r1_5[1], r1_5[2], r2_5[1], r2_6[0]);


FA fa_2_6_0(r1_6[0], r1_6[1], r1_6[2], r2_6[1], r2_7[0]);


FA fa_2_7_0(r1_7[0], r1_7[1], r1_7[2], r2_7[1], r2_8[0]);
HA ha_2_7_0(r1_7[3], r1_7[4], r2_7[2], r2_8[1]);


FA fa_2_8_0(r1_8[0], r1_8[1], r1_8[2], r2_8[2], r2_9[0]);
FA fa_2_8_1(r1_8[3], r1_8[4], r1_8[5], r2_8[3], r2_9[1]);


FA fa_2_9_0(r1_9[0], r1_9[1], r1_9[2], r2_9[2], r2_10[0]);
FA fa_2_9_1(r1_9[3], r1_9[4], r1_9[5], r2_9[3], r2_10[1]);


FA fa_2_10_0(r1_10[0], r1_10[1], r1_10[2], r2_10[2], r2_11[0]);
FA fa_2_10_1(r1_10[3], r1_10[4], r1_10[5], r2_10[3], r2_11[1]);


FA fa_2_11_0(r1_11[0], r1_11[1], r1_11[2], r2_11[2], r2_12[0]);
FA fa_2_11_1(r1_11[3], r1_11[4], r1_11[5], r2_11[3], r2_12[1]);
HA ha_2_11_0(r1_11[6], r1_11[7], r2_11[4], r2_12[2]);


FA fa_2_12_0(r1_12[0], r1_12[1], r1_12[2], r2_12[3], r2_13[0]);
FA fa_2_12_1(r1_12[3], r1_12[4], r1_12[5], r2_12[4], r2_13[1]);
HA ha_2_12_0(r1_12[6], r1_12[7], r2_12[5], r2_13[2]);


FA fa_2_13_0(r1_13[0], r1_13[1], r1_13[2], r2_13[3], r2_14[0]);
FA fa_2_13_1(r1_13[3], r1_13[4], r1_13[5], r2_13[4], r2_14[1]);
FA fa_2_13_2(r1_13[6], r1_13[7], r1_13[8], r2_13[5], r2_14[2]);


FA fa_2_14_0(r1_14[0], r1_14[1], r1_14[2], r2_14[3], r2_15[0]);
FA fa_2_14_1(r1_14[3], r1_14[4], r1_14[5], r2_14[4], r2_15[1]);
FA fa_2_14_2(r1_14[6], r1_14[7], r1_14[8], r2_14[5], r2_15[2]);


FA fa_2_15_0(r1_15[0], r1_15[1], r1_15[2], r2_15[3], r2_16[0]);
FA fa_2_15_1(r1_15[3], r1_15[4], r1_15[5], r2_15[4], r2_16[1]);
FA fa_2_15_2(r1_15[6], r1_15[7], r1_15[8], r2_15[5], r2_16[2]);


FA fa_2_16_0(r1_16[0], r1_16[1], r1_16[2], r2_16[3], r2_17[0]);
FA fa_2_16_1(r1_16[3], r1_16[4], r1_16[5], r2_16[4], r2_17[1]);
FA fa_2_16_2(r1_16[6], r1_16[7], r1_16[8], r2_16[5], r2_17[2]);


FA fa_2_17_0(r1_17[0], r1_17[1], r1_17[2], r2_17[3], r2_18[0]);
FA fa_2_17_1(r1_17[3], r1_17[4], r1_17[5], r2_17[4], r2_18[1]);
FA fa_2_17_2(r1_17[6], r1_17[7], r1_17[8], r2_17[5], r2_18[2]);


FA fa_2_18_0(r1_18[0], r1_18[1], r1_18[2], r2_18[3], r2_19[0]);
FA fa_2_18_1(r1_18[3], r1_18[4], r1_18[5], r2_18[4], r2_19[1]);
FA fa_2_18_2(r1_18[6], r1_18[7], r1_18[8], r2_18[5], r2_19[2]);


FA fa_2_19_0(r1_19[0], r1_19[1], r1_19[2], r2_19[3], r2_20[0]);
FA fa_2_19_1(r1_19[3], r1_19[4], r1_19[5], r2_19[4], r2_20[1]);
HA ha_2_19_0(r1_19[6], r1_19[7], r2_19[5], r2_20[2]);


FA fa_2_20_0(r1_20[0], r1_20[1], r1_20[2], r2_20[3], r2_21[0]);
FA fa_2_20_1(r1_20[3], r1_20[4], r1_20[5], r2_20[4], r2_21[1]);
HA ha_2_20_0(r1_20[6], r1_20[7], r2_20[5], r2_21[2]);


FA fa_2_21_0(r1_21[0], r1_21[1], r1_21[2], r2_21[3], r2_22[0]);
FA fa_2_21_1(r1_21[3], r1_21[4], r1_21[5], r2_21[4], r2_22[1]);


FA fa_2_22_0(r1_22[0], r1_22[1], r1_22[2], r2_22[2], r2_23[0]);
FA fa_2_22_1(r1_22[3], r1_22[4], r1_22[5], r2_22[3], r2_23[1]);


FA fa_2_23_0(r1_23[0], r1_23[1], r1_23[2], r2_23[2], r2_24[0]);
FA fa_2_23_1(r1_23[3], r1_23[4], r1_23[5], r2_23[3], r2_24[1]);


FA fa_2_24_0(r1_24[0], r1_24[1], r1_24[2], r2_24[2], r2_25[0]);
HA ha_2_24_0(r1_24[3], r1_24[4], r2_24[3], r2_25[1]);


FA fa_2_25_0(r1_25[0], r1_25[1], r1_25[2], r2_25[2], r2_26[0]);


FA fa_2_26_0(r1_26[0], r1_26[1], r1_26[2], r2_26[1], r2_27[0]);


FA fa_2_27_0(r1_27[0], r1_27[1], r1_27[2], r2_27[1], r2_28[0]);


HA ha_2_28_0(r1_28[0], r1_28[1], r2_28[1], r2_29[0]);


HA ha_2_29_0(r1_29[0], r1_29[1], r2_29[1], r2_30[0]);


HA ha_2_30_0(r1_30[0], r1_30[1], r2_30[1], r2_31[0]);


//third stage

wire [0:0] r3_0;
wire [0:0] r3_1;
wire [0:0] r3_2;
wire [0:0] r3_3;
wire [1:0] r3_4;
wire [1:0] r3_5;
wire [1:0] r3_6;
wire [1:0] r3_7;
wire [1:0] r3_8;
wire [1:0] r3_9;
wire [1:0] r3_10;
wire [2:0] r3_11;
wire [3:0] r3_12;
wire [3:0] r3_13;
wire [3:0] r3_14;
wire [3:0] r3_15;
wire [3:0] r3_16;
wire [3:0] r3_17;
wire [3:0] r3_18;
wire [3:0] r3_19;
wire [3:0] r3_20;
wire [3:0] r3_21;
wire [2:0] r3_22;
wire [1:0] r3_23;
wire [1:0] r3_24;
wire [1:0] r3_25;
wire [1:0] r3_26;
wire [1:0] r3_27;
wire [1:0] r3_28;
wire [1:0] r3_29;
wire [1:0] r3_30;
wire [1:0] r3_31;

assign r3_0[0] = r2_0[0];


assign r3_1[0] = r2_1[0];


assign r3_2[0] = r2_2[0];


HA ha_3_3_0(r2_3[0], r2_3[1], r3_3[0], r3_4[0]);


HA ha_3_4_0(r2_4[0], r2_4[1], r3_4[1], r3_5[0]);


HA ha_3_5_0(r2_5[0], r2_5[1], r3_5[1], r3_6[0]);


HA ha_3_6_0(r2_6[0], r2_6[1], r3_6[1], r3_7[0]);


FA fa_3_7_0(r2_7[0], r2_7[1], r2_7[2], r3_7[1], r3_8[0]);


FA fa_3_8_0(r2_8[0], r2_8[1], r2_8[2], r3_8[1], r3_9[0]);


FA fa_3_9_0(r2_9[0], r2_9[1], r2_9[2], r3_9[1], r3_10[0]);


FA fa_3_10_0(r2_10[0], r2_10[1], r2_10[2], r3_10[1], r3_11[0]);


FA fa_3_11_0(r2_11[0], r2_11[1], r2_11[2], r3_11[1], r3_12[0]);
HA ha_3_11_0(r2_11[3], r2_11[4], r3_11[2], r3_12[1]);


FA fa_3_12_0(r2_12[0], r2_12[1], r2_12[2], r3_12[2], r3_13[0]);
FA fa_3_12_1(r2_12[3], r2_12[4], r2_12[5], r3_12[3], r3_13[1]);


FA fa_3_13_0(r2_13[0], r2_13[1], r2_13[2], r3_13[2], r3_14[0]);
FA fa_3_13_1(r2_13[3], r2_13[4], r2_13[5], r3_13[3], r3_14[1]);


FA fa_3_14_0(r2_14[0], r2_14[1], r2_14[2], r3_14[2], r3_15[0]);
FA fa_3_14_1(r2_14[3], r2_14[4], r2_14[5], r3_14[3], r3_15[1]);


FA fa_3_15_0(r2_15[0], r2_15[1], r2_15[2], r3_15[2], r3_16[0]);
FA fa_3_15_1(r2_15[3], r2_15[4], r2_15[5], r3_15[3], r3_16[1]);


FA fa_3_16_0(r2_16[0], r2_16[1], r2_16[2], r3_16[2], r3_17[0]);
FA fa_3_16_1(r2_16[3], r2_16[4], r2_16[5], r3_16[3], r3_17[1]);


FA fa_3_17_0(r2_17[0], r2_17[1], r2_17[2], r3_17[2], r3_18[0]);
FA fa_3_17_1(r2_17[3], r2_17[4], r2_17[5], r3_17[3], r3_18[1]);


FA fa_3_18_0(r2_18[0], r2_18[1], r2_18[2], r3_18[2], r3_19[0]);
FA fa_3_18_1(r2_18[3], r2_18[4], r2_18[5], r3_18[3], r3_19[1]);


FA fa_3_19_0(r2_19[0], r2_19[1], r2_19[2], r3_19[2], r3_20[0]);
FA fa_3_19_1(r2_19[3], r2_19[4], r2_19[5], r3_19[3], r3_20[1]);


FA fa_3_20_0(r2_20[0], r2_20[1], r2_20[2], r3_20[2], r3_21[0]);
FA fa_3_20_1(r2_20[3], r2_20[4], r2_20[5], r3_20[3], r3_21[1]);


FA fa_3_21_0(r2_21[0], r2_21[1], r2_21[2], r3_21[2], r3_22[0]);
HA ha_3_21_0(r2_21[3], r2_21[4], r3_21[3], r3_22[1]);


FA fa_3_22_0(r2_22[0], r2_22[1], r2_22[2], r3_22[2], r3_23[0]);


FA fa_3_23_0(r2_23[0], r2_23[1], r2_23[2], r3_23[1], r3_24[0]);


FA fa_3_24_0(r2_24[0], r2_24[1], r2_24[2], r3_24[1], r3_25[0]);


FA fa_3_25_0(r2_25[0], r2_25[1], r2_25[2], r3_25[1], r3_26[0]);


HA ha_3_26_0(r2_26[0], r2_26[1], r3_26[1], r3_27[0]);


HA ha_3_27_0(r2_27[0], r2_27[1], r3_27[1], r3_28[0]);


HA ha_3_28_0(r2_28[0], r2_28[1], r3_28[1], r3_29[0]);


HA ha_3_29_0(r2_29[0], r2_29[1], r3_29[1], r3_30[0]);


HA ha_3_30_0(r2_30[0], r2_30[1], r3_30[1], r3_31[0]);


assign r3_31[1] = r2_31[0];


//fourth stage

wire [0:0] r4_0;
wire [0:0] r4_1;
wire [0:0] r4_2;
wire [0:0] r4_3;
wire [0:0] r4_4;
wire [1:0] r4_5;
wire [1:0] r4_6;
wire [1:0] r4_7;
wire [1:0] r4_8;
wire [1:0] r4_9;
wire [1:0] r4_10;
wire [1:0] r4_11;
wire [1:0] r4_12;
wire [1:0] r4_13;
wire [1:0] r4_14;
wire [1:0] r4_15;
wire [1:0] r4_16;
wire [1:0] r4_17;
wire [1:0] r4_18;
wire [1:0] r4_19;
wire [1:0] r4_20;
wire [1:0] r4_21;
wire [1:0] r4_22;
wire [1:0] r4_23;
wire [1:0] r4_24;
wire [1:0] r4_25;
wire [1:0] r4_26;
wire [1:0] r4_27;
wire [1:0] r4_28;
wire [1:0] r4_29;
wire [1:0] r4_30;
wire [1:0] r4_31;
wire [0:0] r4_32;


assign r4_0[0] = r3_0[0];


assign r4_1[0] = r3_1[0];


assign r4_2[0] = r3_2[0];


assign r4_3[0] = r3_3[0];


HA ha_4_4_0(r3_4[0], r3_4[1], r4_4[0], r4_5[0]);


HA ha_4_5_0(r3_5[0], r3_5[1], r4_5[1], r4_6[0]);


HA ha_4_6_0(r3_6[0], r3_6[1], r4_6[1], r4_7[0]);


HA ha_4_7_0(r3_7[0], r3_7[1], r4_7[1], r4_8[0]);


HA ha_4_8_0(r3_8[0], r3_8[1], r4_8[1], r4_9[0]);


HA ha_4_9_0(r3_9[0], r3_9[1], r4_9[1], r4_10[0]);


HA ha_4_10_0(r3_10[0], r3_10[1], r4_10[1], r4_11[0]);


FA fa_4_11_0(r3_11[0], r3_11[1], r3_11[2], r4_11[1], r4_12[0]);


FA fa_4_12_0(r3_12[0], r3_12[1], r3_12[2], r4_12[1], r4_13[0]);


FA fa_4_13_0(r3_13[0], r3_13[1], r3_13[2], r4_13[1], r4_14[0]);


FA fa_4_14_0(r3_14[0], r3_14[1], r3_14[2], r4_14[1], r4_15[0]);


FA fa_4_15_0(r3_15[0], r3_15[1], r3_15[2], r4_15[1], r4_16[0]);


FA fa_4_16_0(r3_16[0], r3_16[1], r3_16[2], r4_16[1], r4_17[0]);


FA fa_4_17_0(r3_17[0], r3_17[1], r3_17[2], r4_17[1], r4_18[0]);


FA fa_4_18_0(r3_18[0], r3_18[1], r3_18[2], r4_18[1], r4_19[0]);


FA fa_4_19_0(r3_19[0], r3_19[1], r3_19[2], r4_19[1], r4_20[0]);


FA fa_4_20_0(r3_20[0], r3_20[1], r3_20[2], r4_20[1], r4_21[0]);


FA fa_4_21_0(r3_21[0], r3_21[1], r3_21[2], r4_21[1], r4_22[0]);


FA fa_4_22_0(r3_22[0], r3_22[1], r3_22[2], r4_22[1], r4_23[0]);


HA ha_4_23_0(r3_23[0], r3_23[1], r4_23[1], r4_24[0]);


HA ha_4_24_0(r3_24[0], r3_24[1], r4_24[1], r4_25[0]);


HA ha_4_25_0(r3_25[0], r3_25[1], r4_25[1], r4_26[0]);


HA ha_4_26_0(r3_26[0], r3_26[1], r4_26[1], r4_27[0]);


HA ha_4_27_0(r3_27[0], r3_27[1], r4_27[1], r4_28[0]);


HA ha_4_28_0(r3_28[0], r3_28[1], r4_28[1], r4_29[0]);


HA ha_4_29_0(r3_29[0], r3_29[1], r4_29[1], r4_30[0]);


HA ha_4_30_0(r3_30[0], r3_30[1], r4_30[1], r4_31[0]);


HA ha_4_31_0(r3_31[0], r3_31[1], r4_31[1], r4_32[0]);


//fifth stage

wire [0:0] r5_0;
wire [0:0] r5_1;
wire [0:0] r5_2;
wire [0:0] r5_3;
wire [0:0] r5_4;
wire [1:0] r5_5;
wire [1:0] r5_6;
wire [1:0] r5_7;
wire [1:0] r5_8;
wire [1:0] r5_9;
wire [1:0] r5_10;
wire [1:0] r5_11;
wire [1:0] r5_12;
wire [1:0] r5_13;
wire [1:0] r5_14;
wire [1:0] r5_15;
wire [1:0] r5_16;
wire [1:0] r5_17;
wire [1:0] r5_18;
wire [1:0] r5_19;
wire [1:0] r5_20;
wire [1:0] r5_21;
wire [1:0] r5_22;
wire [1:0] r5_23;
wire [1:0] r5_24;
wire [1:0] r5_25;
wire [1:0] r5_26;
wire [1:0] r5_27;
wire [1:0] r5_28;
wire [1:0] r5_29;
wire [1:0] r5_30;
wire [1:0] r5_31;
wire [0:0] r5_32;
wire [0:0] r5_33;

wire [26:0] r5_mid;

assign r5_0[0] = r4_0[0];


assign r5_1[0] = r4_1[0];


assign r5_2[0] = r4_2[0];


assign r5_3[0] = r4_3[0];


assign r5_4[0] = r4_4[0];



HA ha_5_5_0(r4_5[0], r4_5[1], r5_5[0], r5_mid[0]);



FA fa_5_6_0(r4_6[0], r4_6[1], r5_mid[0], r5_6[0], r5_mid[1]);


FA fa_5_7_0(r4_7[0], r4_7[1], r5_mid[1], r5_7[0], r5_mid[2]);


FA fa_5_8_0(r4_8[0], r4_8[1], r5_mid[2], r5_8[0], r5_mid[3]);


FA fa_5_9_0(r4_9[0], r4_9[1], r5_mid[3], r5_9[0], r5_mid[4]);


FA fa_5_10_0(r4_10[0], r4_10[1], r5_mid[4], r5_10[0], r5_mid[5]);


FA fa_5_11_0(r4_11[0], r4_11[1], r5_mid[5], r5_11[0], r5_mid[6]);


FA fa_5_12_0(r4_12[0], r4_12[1], r5_mid[6], r5_12[0], r5_mid[7]);


FA fa_5_13_0(r4_13[0], r4_13[1], r5_mid[7], r5_13[0], r5_mid[8]);


FA fa_5_14_0(r4_14[0], r4_14[1], r5_mid[8], r5_14[0], r5_mid[9]);


FA fa_5_15_0(r4_15[0], r4_15[1], r5_mid[9], r5_15[0], r5_mid[10]);


FA fa_5_16_0(r4_16[0], r4_16[1], r5_mid[10], r5_16[0], r5_mid[11]);


FA fa_5_17_0(r4_17[0], r4_17[1], r5_mid[11], r5_17[0], r5_mid[12]);


FA fa_5_18_0(r4_18[0], r4_18[1], r5_mid[12], r5_18[0], r5_mid[13]);


FA fa_5_19_0(r4_19[0], r4_19[1], r5_mid[13], r5_19[0], r5_mid[14]);


FA fa_5_20_0(r4_20[0], r4_20[1], r5_mid[14], r5_20[0], r5_mid[15]);


FA fa_5_21_0(r4_21[0], r4_21[1], r5_mid[15], r5_21[0], r5_mid[16]);


FA fa_5_22_0(r4_22[0], r4_22[1], r5_mid[16], r5_22[0], r5_mid[17]);


FA fa_5_23_0(r4_23[0], r4_23[1], r5_mid[17], r5_23[0], r5_mid[18]);


FA fa_5_24_0(r4_24[0], r4_24[1], r5_mid[18], r5_24[0], r5_mid[19]);


FA fa_5_25_0(r4_25[0], r4_25[1], r5_mid[19], r5_25[0], r5_mid[20]);


FA fa_5_26_0(r4_26[0], r4_26[1], r5_mid[20], r5_26[0], r5_mid[21]);


FA fa_5_27_0(r4_27[0], r4_27[1], r5_mid[21], r5_27[0], r5_mid[22]);


FA fa_5_28_0(r4_28[0], r4_28[1], r5_mid[22], r5_28[0], r5_mid[23]);


FA fa_5_29_0(r4_29[0], r4_29[1], r5_mid[23], r5_29[0], r5_mid[24]);


FA fa_5_30_0(r4_30[0], r4_30[1], r5_mid[24], r5_30[0], r5_mid[25]);


FA fa_5_31_0(r4_31[0], r4_31[1], r5_mid[25], r5_31[0], r5_mid[26]);



HA ha_5_32_0(r4_32[0], r5_mid[26], r5_32[0], r5_33[0]);


assign c[0] = r5_0[0];
assign c[1] = r5_1[0];
assign c[2] = r5_2[0];
assign c[3] = r5_3[0];
assign c[4] = r5_4[0];
assign c[5] = r5_5[0];
assign c[6] = r5_6[0];
assign c[7] = r5_7[0];
assign c[8] = r5_8[0];
assign c[9] = r5_9[0];
assign c[10] = r5_10[0];
assign c[11] = r5_11[0];
assign c[12] = r5_12[0];
assign c[13] = r5_13[0];
assign c[14] = r5_14[0];
assign c[15] = r5_15[0];
assign c[16] = r5_16[0];
assign c[17] = r5_17[0];
assign c[18] = r5_18[0];
assign c[19] = r5_19[0];
assign c[20] = r5_20[0];
assign c[21] = r5_21[0];
assign c[22] = r5_22[0];
assign c[23] = r5_23[0];
assign c[24] = r5_24[0];
assign c[25] = r5_25[0];
assign c[26] = r5_26[0];
assign c[27] = r5_27[0];
assign c[28] = r5_28[0];
assign c[29] = r5_29[0];
assign c[30] = r5_30[0];
assign c[31] = r5_31[0];
endmodule
